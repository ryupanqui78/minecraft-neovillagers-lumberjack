plugins {
  id 'java-library'
  id 'maven-publish'
  id 'net.neoforged.moddev' version '2.0.90'
}

tasks.named('wrapper', Wrapper).configure {
  distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
  mavenLocal()
}

base {
  archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
  version = project.neo_version
  
  parchment {
    mappingsVersion = project.parchment_mappings_version
    minecraftVersion = project.parchment_minecraft_version
  }
    
  // This line is optional. Access Transformers are automatically detected
  // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')
  
  runs {
    client {
      client()
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
      server()
      programArgument '--nogui'
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    
    gameTestServer {
      type = "gameTestServer"
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
      clientData()
      
      // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
      // gameDirectory = project.file('run-data')

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
    
    // applies to all the run configs above
    configureEach {
      systemProperty 'forge.logging.markers', 'REGISTRIES'
      
      logLevel = org.slf4j.event.Level.DEBUG
    }
  }
  
  mods {
    "${mod_id}" {
      sourceSet(sourceSets.main)
    }
  }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
  runtimeClasspath.extendsFrom localRuntime
}

dependencies {
  // Example optional mod dependency with JEI
  // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
  // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
  // compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
  // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
  // localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"

  // Example mod dependency using a mod jar from ./libs with a flat dir repository
  // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
  // The group id is ignored when searching -- in this case, it is "blank"
  // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

  // Example mod dependency using a file as dependency
  // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

  // Example project dependency using a sister or child project:
  // implementation project(":myproject")

  // For more info:
  // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
  // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
  var replaceProperties = [
    minecraft_version      : minecraft_version,
    minecraft_version_range: minecraft_version_range,
    neo_version            : neo_version,
    neo_version_range      : neo_version_range,
    loader_version_range   : loader_version_range,
    mod_id                 : mod_id,
    mod_name               : mod_name,
    mod_license            : mod_license,
    mod_version            : mod_version,
    mod_authors            : mod_authors,
    mod_description        : mod_description
  ]
  inputs.properties replaceProperties
  expand replaceProperties
  from "src/main/templates"
  into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
  publications {
    register('mavenJava', MavenPublication) {
      from components.java
    }
  }
  repositories {
    maven {
      url "file://${project.projectDir}/repo"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
